-- *은 모든 열 이라는 의미로 사용 한다.
SELECT *
FROM employees; --명령어는 대문자로 사용을 권장 (필수 아님)

SELECT employee_id, first_name, last_name
FROM employees;


SELECT employee_id, first_name, last_name
FROM employees
ORDER BY employee_id DESC,first_name ASC; --DESC 내림차순 ASC 오름차순


SELECT DISTINCT job_id
FROM   employees;  --중복제거


SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성
FROM   employees; --as로 변수지정



SELECT employee_id, first_name||last_name
FROM   employees;   -- 붙혀서 출력


SELECT employee_id, 
first_name||' ' ||last_name,
email||'@' || 'company.com' --문자열
FROM   employees;
--두개열을 붙여서 하나의 값으로 나타낸다
--가운데 한칸띄기

SELECT employee_id, salary as 급여,
    salary+500  as 추가급여, 
    salary -100 as 인하급여 ,
    (salary*1.1)/2 as 조정급여

FROM   employees;

SELECT 열 이름 --------➋ 출력하려는 열

FROM 테이블 이름 ------➊ 참조하려는 테이블

WHERE 원하는 조건; ----➌ 조건식

SELECT *

FROM   employees

WHERE  first_name = 'David';

-- first_name 에서 David 만 출력


SELECT *

FROM   employees

WHERE  employee_id >= 105;

-- employee_id 105이상 직원 출력

SELECT *

FROM   employees

WHERE  salary BETWEEN 10000 AND 20000;
--employees 테이블에서 salary가 10,000 이상이고 20,000 이하인 직원 정보를 출력하세요.


--employees 테이블에서 salary가 10000, 17000, 24000인 직원 정보를 출력

SELECT *

FROM   employees

WHERE  salary IN (10000, 17000, 24000);

SELECT *

FROM   employees

WHERE  job_id LIKE 'AD%'; 
--맨 앞에 AD라는 문자 값을 가지면서 그 뒤로 모든 문자(%)를 포함하는 데이터

SELECT *
FROM  employees
WHERE   job_id LIKE 'AD___'; 
--_가 3개, 즉 AD 뒤에 따라오는 문자열이 3자리인 데이터


--  employees 테이블에서 manager_id가 null 값인 직원 정보를 출력해 보세요.
SELECT *

FROM   employees

WHERE  manager_id IS NULL;

employees 테이블에서 salary가 4000을 초과하면서(AND), job_id가 IT_PROG인 값을 조회하세요.
SELECT *
FROM   employees
WHERE  salary > 4000;
AND job_id = 'IT_PROG';



employees 테이블에서 manager_id가 null 값이 아닌 직원을 조회해 보세요.

SELECT *

FROM   employees

WHERE  manager_id IS NOT NULL; ----null 값이 아닌 경우

SELECT *

FROM   employees

WHERE  employee_id <> 105;
--105 와 같지않은 직원ㅇ


 employees 테이블에서 last_name을 소문자와 대문자로 각각 출력하고, email의 첫 번째 문자는 대문자로 출력하세요.
SELECT last_name,

       LOWER(last_name) LOWER적용3 ,

       UPPER(last_name) UPPER적용,

       email,

       INITCAP(email) INITCAP적용

FROM   employees;


SELECT job_id, 
        SUBSTR(job_id,1,2)
FROM employees;


-- employee 테이블에서 job-id 값의 첫 자리 부터 두개 문자 출력


--employees 테이블에서 job_id 데이터 값의 첫째 자리부터 시작해서 두 개의 문자를 출력하세요.

SELECT job_id, SUBSTR(job_id, 1, 2) 적용결과

FROM   employees;

--employees 테이블에서 job_id 문자열 값이 ACCOUNT면 ACCNT로 출력하세요.

SELECT job_id, REPLACE(job_id, 'ACCOUNT', 'ACCNT') 적용결과

FROM   employees;

-- employees 테이블에서 first_name에 대해 12자리의 문자열 자리를 만들되 first_name의 데이터 값이 12자리보다 작으면 왼쪽에서부터 를 채워서 출력하세요.

SELECT first_name, LPAD(first_name, 12, '') LPAD적용결과

FROM   employees;

--employees 테이블에서 first_name에 대해 12자리의 문자열 자리를 만들되 first_name의 데이터 값이 12자리보다 작으면 왼쪽에서부터 를 채워서 출력하세요.

SELECT first_name, LPAD(first_name, 12, '') LPAD적용결과

FROM   employees;

--employees 테이블에서 job_id의 데이터 값에 대해 왼쪽 방향부터 ‘F’ 문자를 만나면 삭제하고 또 오른쪽 방향부터 ‘T’ 문자를 만나면 삭제해 보세요.

SELECT job_id,

       LTRIM(job_id, 'F') LTRIM적용결과,

       RTRIM(job_id, 'T') RTRIM적용결과

FROM   employees;


--TRIM 함수는 공백(space)을 제거하는 데 사용합니다. 단, 문자열 중간에 있는 공백은 제거할 수 없습니다.
SELECT TRIM('       BIG DATA       ')

FROM    dual;

--공백 제거`~


--employees 테이블에서 salary를 30일로 나눈 후 나눈 값의 소수점 첫째 자리, 소수점 둘째 자리, 정수 첫째 자리에서 반올림한 값을 출력하세요.
SELECT salary,
       salary/30 as 일급,
       ROUND(salary/30, 0) 적용결과0, --ROUND (숫자 or 열이름 , 반올림할 자리값)
       ROUND(salary/30, 1) 적용결과1,
       ROUND(salary/30,-1) 적용결과MINUS1

FROM    employees;

--employees 테이블에서 salary를 30일로 나눈 후 나눈 값의 소수점 첫째 자리, 소수점 둘째 자리, 정수 첫째 자리에서 반올림한 값을 출력하세요.
SELECT TO_CHAR(SYSDATE ,'YY/MM/DD/HH24:MI') 오늘날짜,
       SYSDATE + 1 더하기1,
       SYSDATE - 1 뺴기1,
       TO_DATE('20171202')-TO_DATE('20171201')날짜빼기,
       SYSDATE + 13/24 시간더하기
    

FROM    DUAL;

 --employees 테이블에서 department_id가 100인 직원에 대해 오늘 날짜, hire_date, 오늘 날짜와 hire_date 사이의 개월 수를 출력하세요.
SELECT SYSDATE, hire_date, MONTHS_BETWEEN(SYSDATE, hire_date)

FROM   employees

WHERE department_id = 100;

--MONTHS_BETWEEN(날짜, 날짜)

 --employees 테이블에서 department_id가 100인 직원에 대해 오늘 날짜, hire_date, 오늘 날짜와 hire_date 사이의 개월 수를 출력하세요.
SELECT SYSDATE, hire_date,
                 ADD_MONTHS(hire_date, 3) 더하기_적용결과,

                 ADD_MONTHS(hire_date, -3) 빼기_적용결과

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;
--ADD_MONTHS(날짜, 숫자)




--employees 테이블에서 employee_id가 100과 106 사이인 직원의 hire_date에서 가장 가까운 금요일의
--날짜가 언제인지 문자로 지정해서 출력하고, 숫자로도 지정해서 출력하세요.
SELECT hire_date,

       NEXT_DAY(hire_date,'금요일') 적용결과_문자지정,

       NEXT_DAY(hire_date, 6) 적용결과_숫자지정

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;

--NEXT_DAY (날짜, '요일' or 숫자)


--employees 테이블에서 employee_id가 100과 106 사이인 직원의 hire_date를 기준으로 해당 월의 마지막 날짜를 출력해 보세요.
SELECT hire_date,
       LAST_DAY(hire_date)

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;

--LAST_DAY (날짜)


--employees 테이블에서 employee_id가 100과 106 사이인 직원의 hire_date에 대해 월 기준 반올림,
--연 기준 반올림, 월 기준 절삭, 연 기준 절삭을 적용하여 출력하세요.
SELECT hire_date,

       ROUND(hire_date,‘MONTH’) 적용결과_ROUND_M,

       ROUND(hire_date,‘YEAR’) 적용결과_ROUND_Y,

       TRUNC(hire_date,‘MONTH’) 적용결과_TRUNC_M,

       TRUNC(hire_date,‘YEAR’) 적용결과_TRUNC_Y

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;


SELECT TO_CHAR(SYSDATE, 'YY'),

       TO_CHAR(SYSDATE, 'YYYY'),

       TO_CHAR(SYSDATE, 'MM'),

       TO_CHAR(SYSDATE, 'MON'),

       TO_CHAR(SYSDATE, 'YYYYMMDD') 응용적용1,

       TO_CHAR(TO_DATE('20171008'), 'YYYYMMDD') 응용적용2

FROM   dual;

 

--TO_CHAR(날짜 데이터 타입, '지정 형식')

--employees 테이블에서 first_name, last_name, department_id, salary를 출력하되
--department_id가 60인 경우에는 급여를 10% 인상한 값을 계산하여 출력하고 나머지 경우에는
--원래의 값을 출력하세요. 그리고 department_id가 60인 경우에는 ‘10% 인상’을 출력하고
--나머지 경우에는 ‘미인상’을 출력하세요.
SELECT first_name,

       last_name,

       department_id,

       salary 원래급여,

       DECODE(department_id, 60, salary*1.1, salary) 조정된급여,

       DECODE(department_id, 60, '10%인상', '미인상') 인상여부

FROM   employees;
--DECODE (열이름 ,조건 값 ,치환 값 , 기본값)




 

--employees 테이블에서 job_id가 IT_PROG라면 employee_id, first_name, last_name, salary를
--출력하되 salary가 9000 이상이면 ‘상위급여’, 6000과 8999 사이면 ‘중위급여’, 그 외는 ‘하위급여’라고 출력하세요.

SELECT employee_id, first_name, last_name, salary,

       CASE

            WHEN salary >= 9000 THEN '상위급여'

            WHEN salary BETWEEN 6000 AND 8999 THEN '중위급여'

            ELSE '하위급여'

       END AS 급여등급

FROM  employees

WHERE job_id = 'IT_PROG';

--employees 테이블에서 salary의 최댓값과 최솟값, first_name의 최댓값과 최댓값을 출력해 보세요.

SELECT MAX(salary) 최댓값, MIN(salary) 최솟값, MAX(first_name) 최대문자값, MIN(first_name) 최소문자값

FROM   employees;

 -- employees 테이블에서 employee_id가 10 이상인 직원에 대해 job_id별로 그룹화하여 job_id별 총 급여와 job_id별 평균 급여를 구하고, job_id별 총 급여를 기준으로 내림차순 정렬하세요.

SELECT job_id 직무, SUM(salary) 직무별_총급여, AVG(salary) 직무별_평균급여

FROM   employees

WHERE  employee_id >= 10

GROUP  BY job_id

ORDER  BY 직무별_총급여 DESC, 직무별_평균급여;


